generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String             @id @default(cuid())
  licenseId           String?            @map("license_id") // ใช้สำหรับ active license
  name                String?
  email               String             @unique
  password            String?
  emailVerified       DateTime?          @map("email_verified")
  image               String?
  role                Role               @default(USER)
  xp                  Int                @default(0)
  level               Int                @default(1)
  cefrLevel           String             @default("A1-") @map("cefr_level")
  expiredDate         DateTime?          @map("expired_date")
  onborda             Boolean?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  userActivities      UserActivity[]
  xpLogs              XPLog[]
  accounts            Account[]
  assignments         Assignment[]
  studentClassrooms   ClassroomStudent[]
  teacherClassrooms   ClassroomTeacher[] @relation("ClassroomTeachers")
  createdClassrooms   Classroom[]        @relation("CreatedClassrooms")
  classroomsAsTeacher Classroom[]        @relation("TeacherClassrooms")
  sessions            Session[]
  ownedLicenses       License[]          @relation("OwnedLicenses")
  licenseOnUsers      LicenseOnUser[]
  userWordRecords     UserWordRecord[]
  userSentenceRecords UserSentenceRecord[]
  lessonRecords       LessonRecord[]
  storyRecords        StoryRecord[]
  chapterTrackings    ChapterTracking[]
  storyAssignments    StoryAssignment[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @map("refresh_token")
  access_token      String? @map("access_token")
  expires_at        Int?    @map("expires_at")
  token_type        String? @map("token_type")
  scope             String?
  id_token          String? @map("id_token")
  session_state     String? @map("session_state")
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model XPLog {
  id           String       @id @default(cuid())
  userId       String       @map("user_id")
  xpEarned     Int          @map("xp_earned")
  activityId   String       @map("activity_id")
  activityType ActivityType @map("activity_type")
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("XPLogs")
}

model UserActivity {
  id           String       @id @default(cuid())
  userId       String       @map("user_id")
  activityType ActivityType @map("activity_type")
  targetId     String       @map("target_id")
  timer        Int?
  details      Json?
  completed    Boolean      @default(false)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, activityType, targetId])
  @@map("UserActivity")
}

model Article {
  id                      String                   @id @default(cuid())
  type                    String?
  genre                   String?
  subGenre                String?                  @map("sub_genre")
  title                   String?
  summary                 String?
  passage                 String?
  translatedSummary       Json?                    @map("translated_summary")
  translatedPassage       Json?                    @map("translated_passage")
  imageDescription        String?                  @map("image_description")
  cefrLevel               String?                  @map("cefr_level")
  raLevel                 Int?                     @map("ra_level")
  rating                  Float?
  audioUrl                String?                  @map("audio_url")
  audioWordUrl            String?                  @map("audio_word_url")
  sentences               Json?
  words                   Json?
  authorId                String?                  @map("author_id")
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  longAnswerQuestions     LongAnswerQuestion[]
  multipleChoiceQuestions MultipleChoiceQuestion[]
  shortAnswerQuestions    ShortAnswerQuestion[]
  assignments             Assignment[]
  userWordRecords         UserWordRecord[]
  userSentenceRecords     UserSentenceRecord[]
  lessonRecords           LessonRecord[]
  storyAssignments        StoryAssignment[]

  @@map("article")
}

model MultipleChoiceQuestion {
  id              String   @id @default(cuid())
  question        String
  options         String[]
  answer          String
  textualEvidence String   @map("textual_evidence")
  articleId       String   @map("article_id")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  article         Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@map("MultipleChoiceQuestion")
}

model ShortAnswerQuestion {
  id        String   @id @default(cuid())
  question  String
  answer    String
  articleId String   @map("article_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@map("ShortAnswerQuestion")
}

model LongAnswerQuestion {
  id        String   @id @default(cuid())
  question  String
  articleId String   @map("article_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@map("LongAnswerQuestion")
}

model Classroom {
  id            String             @id @default(cuid())
  classroomName String?            @map("classroom_name") @db.VarChar
  teacherId     String?            @map("teacher_id") // Keep old field temporarily
  createdBy     String?            @map("created_by") // Make optional first
  classCode     String?            @unique @map("class_code") @db.VarChar
  codeExpiresAt DateTime?          @map("code_expires_at")
  archived      Boolean?
  grade         Int?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  assignments   Assignment[]
  storyAssignments StoryAssignment[]
  students      ClassroomStudent[]
  teachers      ClassroomTeacher[] // relation กับ teachers หลายคน
  creator       User?              @relation("CreatedClassrooms", fields: [createdBy], references: [id])
  teacher       User?              @relation("TeacherClassrooms", fields: [teacherId], references: [id])

  @@map("classrooms")
}

model ClassroomStudent {
  id          String    @id @default(cuid())
  studentId   String    @map("student_id")
  classroomId String    @map("classroom_id")
  createdAt   DateTime  @default(now())
  classroom   Classroom @relation(fields: [classroomId], references: [id])
  student     User      @relation(fields: [studentId], references: [id])

  @@unique([classroomId, studentId])
  @@map("classroomStudents")
}

model ClassroomTeacher {
  id          String    @id @default(cuid())
  teacherId   String    @map("teacher_id")
  classroomId String    @map("classroom_id")
  role        TeacherRole @default(CO_TEACHER) // OWNER หรือ CO_TEACHER
  createdAt   DateTime  @default(now())
  classroom   Classroom @relation(fields: [classroomId], references: [id])
  teacher     User      @relation("ClassroomTeachers", fields: [teacherId], references: [id])

  @@unique([classroomId, teacherId])
  @@map("classroomTeachers")
}


model License {
  id          String         @id @default(cuid())
  key         String         @unique
  schoolName  String        
  expiresAt   DateTime?     
  maxUsers    Int            @default(1)
  licenseType LicenseType    @default(BASIC)
  ownerUserId String?        @map("owner_user_id")
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  usedLicenses  Int?        @map("used_licenses")
  licenseUsers  LicenseOnUser[]
  owner       User?          @relation("OwnedLicenses", fields: [ownerUserId], references: [id])

  @@map("licenses")
}

model LicenseOnUser {
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  licenseId  String
  license    License  @relation(fields: [licenseId], references: [id])
  activateAt DateTime @default(now())

  @@id([userId, licenseId])
  @@map("license_on_users")
}

model Assignment {
  classroomId String    @map("classroom_id")
  id          String    @id @default(cuid())
  userId      String?   @map("user_id")
  articleId   String    @map("article_id")
  status      Status?   @default(NOT_STARTED)
  title       String?   @db.VarChar
  description String?
  dueDate     DateTime? @map("due_date")
  createdAt   DateTime  @default(now())
  article     Article   @relation(fields: [articleId], references: [id])
  classroom   Classroom @relation(fields: [classroomId], references: [id])
  user        User?     @relation(fields: [userId], references: [id])

  @@map("assignments")
}

model UserWordRecord {
  id              String   @id @default(cuid())
  userId          String   @map("user_id")
  articleId       String   @map("article_id")
  word            Json     // Stores vocabulary and definition data
  saveToFlashcard Boolean  @default(true) @map("save_to_flashcard")
  difficulty      Float    @default(0)
  due             DateTime @default(now())
  elapsedDays     Int      @default(0) @map("elapsed_days")
  lapses          Int      @default(0)
  reps            Int      @default(0)
  scheduledDays   Int      @default(0) @map("scheduled_days")
  stability       Float    @default(0)
  state           Int      @default(0) // New=0, Learning=1, Review=2, Relearning=3
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  article         Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@unique([userId, articleId, word])
  @@map("user_word_records")
}

model UserSentenceRecord {
  id              String   @id @default(cuid())
  userId          String   @map("user_id")
  articleId       String?  @map("article_id")
  storyId         String?  @map("story_id")
  chapterNumber   Int?     @map("chapter_number")
  sentence        String
  translation     Json     // Stores translations in different languages
  sn              Int      // Sentence number
  timepoint       Float    // Start time in audio
  endTimepoint    Float    @map("end_timepoint") // End time in audio
  audioUrl        String?  @map("audio_url")
  saveToFlashcard Boolean  @default(true) @map("save_to_flashcard")
  difficulty      Float    @default(0)
  due             DateTime @default(now())
  elapsedDays     Int      @default(0) @map("elapsed_days")
  lapses          Int      @default(0)
  reps            Int      @default(0)
  scheduledDays   Int      @default(0) @map("scheduled_days")
  stability       Float    @default(0)
  state           Int      @default(0) // New=0, Learning=1, Review=2, Relearning=3
  updateScore     Boolean? @default(false) @map("update_score")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  article         Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@map("user_sentence_records")
}

enum Role {
  USER
  STUDENT
  TEACHER
  ADMIN
  SYSTEM
}

enum ActivityType {
  ARTICLE_RATING
  ARTICLE_READ
  STORIES_RATING
  STORIES_READ
  CHAPTER_RATING
  CHAPTER_READ
  LEVEL_TEST
  MC_QUESTION
  SA_QUESTION
  LA_QUESTION
  SENTENCE_FLASHCARDS
  SENTENCE_MATCHING
  SENTENCE_ORDERING
  SENTENCE_WORD_ORDERING
  SENTENCE_CLOZE_TEST
  VOCABULARY_FLASHCARDS
  VOCABULARY_MATCHING
}

enum Status {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

enum LicenseType {
  BASIC
  PREMIUM
  ENTERPRISE
}

enum TeacherRole {
  OWNER
  CO_TEACHER
}

// === Story Models ===
model Story {
  id            String             @id @default(cuid())
  title         String
  summary       String?
  type          String?
  genre         String?
  subgenre      String?
  raLevel       Int                @map("ra_level")
  cefrLevel     String             @map("cefr_level")
  rating        Float?
  averageRating Float?             @map("average_rating")
  audioUrl      String?            @map("audio_url")
  imageUrl      String?            @map("image_url")
  authorId      String?            @map("author_id")
  createdAt     DateTime           @default(now()) @map("created_at")
  updatedAt     DateTime           @updatedAt @map("updated_at")
  chapters      Chapter[]
  timepoints    StoryTimepoint[]
  storyRecords  StoryRecord[]
  storyAssignments StoryAssignment[]

  @@map("stories")
}

model Chapter {
  id            String    @id @default(cuid())
  storyId       String    @map("story_id")
  chapterNumber Int       @map("chapter_number")
  title         String
  content       String
  summary       String?
  imageUrl      String?   @map("image_url")
  audioUrl      String?   @map("audio_url")
  rating        Float?
  userRatingCount Int?    @map("user_rating_count")
  wordCount     Int?      @map("word_count")
  sentences     Json?
  words         Json?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  story         Story     @relation(fields: [storyId], references: [id], onDelete: Cascade)
  chapterTrackings ChapterTracking[]

  @@unique([storyId, chapterNumber])
  @@map("chapters")
}

model StoryTimepoint {
  id            String   @id @default(cuid())
  storyId       String   @map("story_id")
  chapterNumber Int      @map("chapter_number")
  timepoints    Json     // Array of timepoint objects
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  story         Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)

  @@unique([storyId, chapterNumber])
  @@map("story_timepoints")
}

model StoryRecord {
  id            String           @id @default(cuid())
  userId        String           @map("user_id")
  storyId       String           @map("story_id")
  title         String?
  level         Int?
  rated         Int              @default(0)
  score         Int              @default(0)
  status        QuizStatus       @default(READ)
  createdAt     DateTime         @default(now()) @map("created_at")
  updatedAt     DateTime         @updatedAt @map("updated_at")
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  story         Story            @relation(fields: [storyId], references: [id], onDelete: Cascade)
  chapterTrackings ChapterTracking[]

  @@unique([userId, storyId])
  @@map("story_records")
}

model ChapterTracking {
  id            String      @id @default(cuid())
  userId        String      @map("user_id")
  storyId       String      @map("story_id")
  chapterNumber Int         @map("chapter_number")
  title         String?
  level         Int?
  rated         Int         @default(0)
  scores        Int         @default(0)
  status        QuizStatus  @default(READ)
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  chapter       Chapter     @relation(fields: [storyId, chapterNumber], references: [storyId, chapterNumber], onDelete: Cascade)
  storyRecord   StoryRecord @relation(fields: [userId, storyId], references: [userId, storyId], onDelete: Cascade)

  @@unique([userId, storyId, chapterNumber])
  @@map("chapter_trackings")
}

model StoryAssignment {
  id          String    @id @default(cuid())
  classroomId String    @map("classroom_id")
  userId      String?   @map("user_id")
  storyId     String    @map("story_id")
  articleId   String?   @map("article_id") // For compatibility with existing system
  status      Status    @default(NOT_STARTED)
  title       String?
  description String?
  dueDate     DateTime? @map("due_date")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  classroom   Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  user        User?     @relation(fields: [userId], references: [id])
  story       Story     @relation(fields: [storyId], references: [id], onDelete: Cascade)
  article     Article?  @relation(fields: [articleId], references: [id])

  @@map("story_assignments")
}

// === Lesson Models ===
model LessonRecord {
  id          String        @id @default(cuid())
  userId      String        @map("user_id")
  articleId   String        @map("article_id")
  phase1      Json          @default("{\"status\": 2, \"elapsedTime\": 0}")
  phase2      Json          @default("{\"status\": 0, \"elapsedTime\": 0}")
  phase3      Json          @default("{\"status\": 0, \"elapsedTime\": 0}")
  phase4      Json          @default("{\"status\": 0, \"elapsedTime\": 0}")
  phase5      Json          @default("{\"status\": 0, \"elapsedTime\": 0}")
  phase6      Json          @default("{\"status\": 0, \"elapsedTime\": 0}")
  phase7      Json          @default("{\"status\": 0, \"elapsedTime\": 0}")
  phase8      Json          @default("{\"status\": 0, \"elapsedTime\": 0}")
  phase9      Json          @default("{\"status\": 0, \"elapsedTime\": 0}")
  phase10     Json          @default("{\"status\": 0, \"elapsedTime\": 0}")
  phase11     Json          @default("{\"status\": 0, \"elapsedTime\": 0}")
  phase12     Json          @default("{\"status\": 0, \"elapsedTime\": 0}")
  phase13     Json          @default("{\"status\": 0, \"elapsedTime\": 0}")
  phase14     Json          @default("{\"status\": 0, \"elapsedTime\": 0}")
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  article     Article       @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@unique([userId, articleId])
  @@map("lesson_records")
}

// Custom types
enum QuizStatus {
  READ
  COMPLETED
}